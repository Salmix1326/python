-- Завдання 1
-- Створіть базу даних Лікарня (Hospital), яка міститиме інформацію про обстеження, які проводяться в лікарні.
-- Опис бази даних знаходиться в кінці цього файлу.
-- Створіть базу даних Лікарня (Hospital), яка міститиме інформацію про обстеження, які проводяться в -- лікарні.
-- Обстеження, які проводяться в лікарні, представлені у вигляді таблиці Обстеження (Examinations), 
-- в якій зібрано основну інформацію: назва обстеження, день тижня, коли проводиться обстеження, 
-- а також час початку та завершення.
-- Також у базі даних є інформація про персонал лікарні, яка зберігається в таблиці Лікарі (Doctors). 
-- Дані про відділення та захворювання містяться в таблицях Відділення
-- (Departments) та Захворювання (Diseases) відповідно.
-- Опис палат зберігається в таблиці Палати (Wards).
-- Нижче наведено детальний опис структури кожної таблиці.

-- Відділення (Departments)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор відділення.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Корпус (Building). Номер корпусу, в якому знаходиться відділення.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 1 до 5.
-- ■ Фінансування (Financing). Фонд фінансування відділення.
-- ▷ Тип даних для зберігання грошових значень.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше, ніж 0.
-- ▷ Значення за замовчуванням — 0.
-- ■ Назва (Name). Назва відділення.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.

CREATE TABLE DEPARTMENTS (
	ID SERIAL NOT NULL PRIMARY KEY,
	BUILDING INT NOT NULL CHECK(BUILDING BETWEEN 1 AND 5),
	FINANCING INT NOT NULL CHECK(FINANCING >= 0),
	NAME VARCHAR(100) NOT NULL UNIQUE
)

INSERT INTO DEPARTMENTS (BUILDING, FINANCING, NAME)
VALUES
	(1, 150000, 'Кардиология'),
	(2, 120000, 'Неврология'),
	(3, 180000, 'Хирургия'),
	(4, 95000,  'Педиатрия'),
	(5, 110000, 'Травматология'),
	(2, 130000, 'Онкология'),
	(3, 160000, 'Офтальмология');

SELECT * FROM DEPARTMENTS;

-- # ============================================================================================
-- Захворювання (Diseases)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор захво-рювання.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Назва (Name). Назва захворювання.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.
-- ■ Ступінь тяжкості (Severity). Ступінь тяжкості захворювання.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше, ніж 1.
-- ▷ Значення за замовчуванням — 1.

CREATE TABLE DISEASES (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE,
	SEVERITY INT NOT NULL CHECK(SEVERITY >= 1) DEFAULT 1
);

INSERT INTO DISEASES (NAME, SEVERITY)
VALUES
	('Грипп', 2),
	('Пневмония', 4),
	('Мигрень', 2),
	('Инфаркт миокарда', 5),
	('Перелом кости', 3),
	('Диабет', 4),
	('Астма', 3),
	('Гипертония', 3),
	('Гастрит', 2),
	('Язва желудка', 4),
	('Артрит', 3),
	('Аппендицит', 4),
	('Ожирение', 2),
	('Рак лёгких', 5),
	('Депрессия', 3),
	('Анемия', 2),
	('Гепатит B', 4),
	('Псориаз', 2),
	('Коронавирусная инфекция', 4),
	('Инсульт', 5);


-- INSERT INTO DISEASES (NAME, SEVERITY)
-- VALUES ('Инсульт', 3);

SELECT * FROM DISEASES;

-- # ============================================================================================
-- Лікарі (Doctors)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор лікаря.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Ім’я (Name). Ім’я лікаря.
-- ▷ Тип даних — varchar(255).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожнє.
-- ■ Телефон(Phone). Телефонний номер лікаря.
-- ▷ Тип даних — char(10).
-- ▷ Може містити null-значення.
-- ■ Ставка (Salary). Ставка лікаря.
-- ▷ Тип даних для зберігання грошових значень.
-- ▷ Не містить null-значення.
-- ▷ Не може бути меншою або дорівнювати 0.
-- ■ Прізвище (Surname). Прізвище лікаря.
-- ▷ Тип даних — varchar(255).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожнє.

CREATE TABLE DOCTORS (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(255) NOT NULL CHECK(NAME != ''),
	PHONE CHAR(10),
	SALARY INT NOT NULL CHECK(SALARY > 0),
	SURNAME VARCHAR(255) NOT NULL CHECK(SURNAME != '')
);

INSERT INTO DOCTORS (NAME, SURNAME, PHONE, SALARY)
VALUES
	('Алексей', 'Иванов', '9001234567', 85000),
	('Мария', 'Петрова', '9002345678', 92000),
	('Дмитрий', 'Сидоров', '9003456789', 87000),
	('Ольга', 'Кузнецова', '9004567890', 94000),
	('Игорь', 'Смирнов', '9005678901', 88000),
	('Анна', 'Волкова', '9006789012', 96000),
	('Сергей', 'Новиков', '9007890123', 91000),
	('Елена', 'Федорова', '9008901234', 97000),
	('Андрей', 'Морозов', '9009012345', 89000),
	('Наталья', 'Алексеева', '9010123456', 93000),
	('Павел', 'Лебедев', '9011234567', 85000),
	('Татьяна', 'Семенова', '9012345678', 92000),
	('Роман', 'Егоров', '9013456789', 87000),
	('Ирина', 'Николаева', '9014567890', 94000),
	('Константин', 'Орлов', '9015678901', 88000),
	('Юлия', 'Макарова', '9016789012', 96000),
	('Михаил', 'Зайцев', '9017890123', 91000),
	('Светлана', 'Соловьева', '9018901234', 97000),
	('Артем', 'Борисов', '9019012345', 89000),
	('Виктория', 'Васильева', '9020123456', 93000),
	('Кирилл', 'Павлов', '9021234567', 85000),
	('Екатерина', 'Ковалёва', '9022345678', 92000),
	('Никита', 'Тарасов', '9023456789', 87000),
	('Валентина', 'Беляева', '9024567890', 94000),
	('Максим', 'Гусев', '9025678901', 88000),
	('Лариса', 'Киселева', '9026789012', 96000),
	('Александр', 'Романов', '9027890123', 91000),
	('Алёна', 'Мартынова', '9028901234', 97000),
	('Владимир', 'Савельев', '9029012345', 89000),
	('Дарья', 'Фролова', '9030123456', 93000),
	('Григорий', 'Чернов', '9031234567', 85000),
	('Марина', 'Абрамова', '9032345678', 92000),
	('Олег', 'Степанов', '9033456789', 87000),
	('Надежда', 'Карпова', '9034567890', 94000),
	('Борис', 'Сорокин', '9035678901', 88000),
	('Вера', 'Анисимова', '9036789012', 96000),
	('Станислав', 'Куликов', '9037890123', 91000),
	('Евгения', 'Медведева', '9038901234', 97000),
	('Леонид', 'Гаврилов', '9039012345', 89000),
	('Полина', 'Данилова', '9040123456', 93000);

SELECT * FROM DOCTORS

-- # ============================================================================================
-- Обстеження (Examinations)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор обсте-ження.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ День тижня (DayOfWeek). День тижня, коли проводиться обстеження.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 1 до 7.
-- ■ Час завершення (EndTime). Час завершення обстеження.
-- ▷ Тип даних для зберігання часу.
-- ▷ Не містить null-значення.
-- ▷ Має бути більше, ніж час початку обстеження.
-- ■ Назва (Name). Назва обстеження.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.
-- ■ Час початку (StartTime). Час початку обстеження.
-- ▷ Тип даних для зберігання часу.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 8:00 до 18:00.

CREATE TABLE EXAMINATIONS (
	ID SERIAL NOT NULL PRIMARY KEY,
	DAYOFWEEK INT NOT NULL CHECK(DAYOFWEEK BETWEEN 1 AND 7),
	ENDTIME TIME NOT NULL CHECK(ENDTIME > STARTTIME),
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE,
	STARTTIME TIME NOT NULL CHECK(STARTTIME BETWEEN '08:00' AND '18:00')
);

INSERT INTO EXAMINATIONS (DAYOFWEEK, STARTTIME, ENDTIME, NAME)
VALUES
	(1, '08:00', '08:30', 'Общий осмотр'),
	(1, '08:45', '09:15', 'Измерение давления'),
	(1, '09:30', '10:00', 'Снятие ЭКГ'),
	(2, '08:00', '08:40', 'Рентген грудной клетки'),
	(2, '09:00', '09:30', 'УЗИ брюшной полости'),
	(2, '10:00', '10:30', 'Проверка зрения'),
	(3, '08:30', '09:00', 'Измерение сахара в крови'),
	(3, '09:15', '09:45', 'Анализ крови'),
	(3, '10:00', '10:30', 'Анализ мочи'),
	(3, '10:45', '11:15', 'Флюорография'),
	(4, '08:00', '08:30', 'Проверка слуха'),
	(4, '08:45', '09:15', 'Осмотр терапевта'),
	(4, '09:30', '10:00', 'Консультация кардиолога'),
	(4, '10:15', '10:45', 'Консультация невролога'),
	(4, '11:00', '11:30', 'Консультация хирурга'),
	(5, '08:00', '08:40', 'МРТ головного мозга'),
	(5, '09:00', '09:30', 'КТ грудной клетки'),
	(5, '09:45', '10:15', 'Эндоскопия'),
	(5, '10:30', '11:00', 'Колонскопия'),
	(5, '11:15', '11:45', 'Маммография'),
	(6, '08:00', '08:30', 'Осмотр дерматолога'),
	(6, '08:45', '09:15', 'Осмотр офтальмолога'),
	(6, '09:30', '10:00', 'Осмотр эндокринолога'),
	(6, '10:15', '10:45', 'Осмотр отоларинголога'),
	(6, '11:00', '11:30', 'Осмотр гастроэнтеролога'),
	(7, '08:00', '08:30', 'Физиотерапия'),
	(7, '08:45', '09:15', 'ЛФК'),
	(7, '09:30', '10:00', 'Массаж спины'),
	(7, '10:15', '10:45', 'Психологическая консультация'),
	(7, '11:00', '11:30', 'Контрольный осмотр');

SELECT * FROM EXAMINATIONS

-- # ============================================================================================
-- Палати (Wards)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Корпус (Building). Номер корпусу, де знаходиться палата.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 1 до 5.
-- ■ Поверх (Floor). Номер поверху, на якому знаходиться палата.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше, ніж 1.
-- ■ Назва (Name). Назва палати.
-- ▷ Тип даних — varchar(20).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.

CREATE TABLE WARDS (
	ID SERIAL NOT NULL PRIMARY KEY,
	DEPARTMENT_ID INT REFERENCES DEPARTMENTS(ID) NOT NULL,
	FLOOR INT NOT NULL CHECK(FLOOR >= 1),
	NAME VARCHAR(20) NOT NULL CHECK(NAME != '') UNIQUE
);

INSERT INTO WARDS (DEPARTMENT_ID, FLOOR, NAME)
VALUES
	(1, 1, 'Палата №101'),
	(1, 2, 'Палата №102'),
	(2, 1, 'Палата №201'),
	(2, 2, 'Палата №202'),
	(3, 1, 'Палата №301'),
	(3, 2, 'Палата №302'),
	(3, 3, 'Палата №303'),
	(4, 1, 'Палата №401'),
	(4, 2, 'Палата №402'),
	(4, 3, 'Палата №403'),
	(5, 1, 'Палата №501'),
	(5, 2, 'Палата №502'),
	(6, 1, 'Палата №601'),
	(6, 2, 'Палата №602'),
	(6, 3, 'Палата №603'),
	(7, 1, 'Палата №701'),
	(7, 2, 'Палата №702'),
	(7, 3, 'Палата №703'),
	(7, 4, 'Палата №704'),
	(7, 5, 'Палата №705');

SELECT * FROM WARDS;

INSERT INTO WARDS (DEPARTMENT_ID, FLOOR, NAME)
VALUES 
		(10, 1, 'Палата №999');

-- # ============================================================================================
-- Завдання 2
-- Для бази даних «Таблиця» створіть такі запити:

-- 1. Вивести вміст таблиці палат.
SELECT * FROM WARDS;

-- 2. Вивести прізвища та телефони усіх лікарів.
SELECT SURNAME, PHONE FROM DOCTORS;

-- 3. Вивести усі поверхи без повторень, де розміщуються палати.
SELECT DISTINCT FLOOR FROM WARDS;

-- 4. Вивести назви захворювань під назвою « Name of Disease» та ступінь їхньої тяжкості під назвою «Severity of Disease».
SELECT NAME AS "NAME OF DESEASE", SEVERITY AS "SEVERITY OF DESEASE" FROM DISEASES; 

-- 5. Вивести назви відділень, які знаходяться у корпусі 5 з фондом фінансування меншим, ніж 30000.
SELECT NAME, BUILDING FROM DEPARTMENTS WHERE BUILDING = 5 AND FINANCING < 300000;

-- 6. Вивести назви відділень, які знаходяться у корпусі 3 з фондом фінансування у діапазоні від 12000 до 15000.
SELECT NAME, BUILDING FROM DEPARTMENTS WHERE BUILDING = 3 AND FINANCING BETWEEN 120000 AND 1500000;

-- 7. Вивести назви палат, які знаходяться у корпусах 4 та 5 на 1-му поверсі.
SELECT DEPARTMENTS
FROM WARDS JOIN DEPARTMENTS 
ON DEPARTMENTS.ID = WARDS.DEPARTMENT_ID
WHERE BUILDING IN (5,4) AND FLOOR = 1;

-- 8. Вивести назви, корпуси та фонди фінансування відділень, які знаходяться у корпусах 3 або 6 та мають фонд фінансування менший, ніж 11000 або більший за 25000.
SELECT NAME, BUILDING, FINANCING FROM DEPARTMENTS WHERE (BUILDING = 3 OR BUILDING = 6) AND (FINANCING < 110000 OR FINANCING > 170000);
SELECT * FROM DEPARTMENTS;

-- 9. Вивести прізвища лікарів, зарплата (сума ставки та надбавки 120) яких перевищує 1500.
SELECT SURNAME FROM DOCTORS WHERE SALARY + 1200 >= 90000;

-- 10. Вивести прізвища лікарів, у яких половина зарплати перевищує триразову надбавку у вигляді 500.
SELECT SURNAME FROM DOCTORS WHERE SALARY / 2 >= 3 * 15000;

-- 11. Вивести назви обстежень без повторень, які проводяться у перші три дні тижня з 12:00 до 15:00.
SELECT DISTINCT NAME, DAYOFWEEK, STARTTIME, ENDTIME FROM EXAMINATIONS WHERE DAYOFWEEK BETWEEN 1 AND 3 AND STARTTIME >= '8:00' AND ENDTIME <= '13:00';
SELECT * FROM EXAMINATIONS;

-- 12. Вивести назви та номери корпусів відділень, які знаходяться у корпусах 1, 3, 8 або 10.
SELECT NAME, BUILDING FROM DEPARTMENTS WHERE BUILDING IN (1, 3, 8, 10);

-- 13. Вивести назви захворювань усіх ступенів тяжкості, крім 1-го та 2-го.
SELECT NAME, SEVERITY FROM DISEASES WHERE SEVERITY >= 3;

-- 14. Вивести назви відділень, які не знаходяться у першому або третьому корпусі.
SELECT NAME, BUILDING FROM DEPARTMENTS WHERE BUILDING NOT IN (1,3);

-- 15. Вивести назви відділень, які знаходяться у першому або третьому корпусі.
SELECT NAME, BUILDING FROM DEPARTMENTS WHERE BUILDING IN (1,3);

-- 16. Вивести прізвища лікарів, що починаються з літери «N».
SELECT SURNAME FROM DOCTORS WHERE SURNAME LIKE 'П%';

-- 17. Count of diseases depends on severity level.
SELECT SEVERITY AS "SEVERITY LEVEL", COUNT(*) AS "COUNT OF SEVERITY" FROM DISEASES GROUP BY SEVERITY ORDER BY SEVERITY ASC;

-- 18. Count of diseases for each severity level without 3th
SELECT SEVERITY AS "SEVERITY LEVEL", COUNT(*) AS "COUNT OF SEVERITY", string_agg(NAME, ', ') FROM DISEASES WHERE SEVERITY != 3 GROUP BY SEVERITY ORDER BY SEVERITY ASC;
