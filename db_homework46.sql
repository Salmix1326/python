-- Модуль 15. Вступ до теорії баз даних
-- Тема: Вступ до теорії баз даних.
-- Частина 3
-- Завдання 1

-- #==============================================================================================================

-- База даних Академія (Academy) містить інформацію про співробітників та внутрішній порядок академії.
-- Викладачі, які читають лекції в академії, занесені до таблиці
-- Викладачі (Teachers), в якій зібрано основну інформацію: ім’я, прізвище, дані про зарплату, дата прийому на роботу.
-- Також у базі даних є інформація про групи, яка зберігається в таблиці Групи (Groups). 
-- Дані про факультети та кафедри містяться в таблицях Факультети (Faculties) та Кафедри (Departments) відповідно.

CREATE DATABASE ACADEMY;

-- #==============================================================================================================
-- Кафедри (Departments)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор кафедри.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- #=========================
-- ■ Фінансування (Financing). Фонд фінансування кафедри.
-- ▷ Тип даних — money.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше, ніж 0.
-- ▷ Значення за замовчуванням — 0.
-- #=========================
-- ■ Назва (Name). Назва кафедри.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.

CREATE TABLE DEPARTMENTS (
	ID SERIAL NOT NULL PRIMARY KEY,
	FINANCING NUMERIC(12,2) NOT NULL CHECK(FINANCING >= 0) DEFAULT 0,
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE
)

INSERT INTO DEPARTMENTS (FINANCING, NAME) VALUES
(20000.00, 'Кафедра экономики'),
(18000.00, 'Кафедра бухгалтерского учёта и аудита'),
(22000.00, 'Кафедра финансов и банковского дела'),
(19000.00, 'Кафедра маркетинга и менеджмента'),
(21000.00, 'Кафедра информационных систем в экономике'),
(17000.00, 'Кафедра бизнес-анализа'),
(16000.00, 'Кафедра цифровой экономики'),
(15000.00, 'Кафедра программирования и IT-проектов'),
(14000.00, 'Кафедра управления данными и базами данных'),
(20000.00, 'Кафедра электронной коммерции');

SELECT * FROM DEPARTMENTS;

-- #==============================================================================================================
-- Факультети(Faculties)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор факультету.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- #=========================
-- ■ Декан (Dean). Декан факультету.
-- ▷ Тип даних — varchar(255).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожнім.
-- #=========================
-- ■ Назва (Name). Назва факультету.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.

CREATE TABLE FACULTIES (
	ID SERIAL NOT NULL PRIMARY KEY,
	DEAN VARCHAR(255) NOT NULL CHECK(DEAN != ''),
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE
)

INSERT INTO FACULTIES (DEAN, NAME) VALUES
('Петренко Иван Иванович', 'Факультет экономики и IT'),
('Сидоренко Елена Петровна', 'Факультет медицины'),
('Коваленко Андрей Сергеевич', 'Факультет юриспруденции'),
('Мельник Наталья Викторовна', 'Факультет инженерии и технологий'),
('Ткаченко Олег Михайлович', 'Факультет психологии и социальных наук'),
('Бондаренко Екатерина Павловна', 'Факультет биологии и экологии'),
('Шевченко Владимир Александрович', 'Факультет физики и математики'),
('Кузьменко Марина Владимировна', 'Факультет химии и материаловедения'),
('Гончаренко Сергей Игоревич', 'Факультет международных отношений'),
('Лысенко Юлия Алексеевна', 'Факультет искусств и дизайна');

SELECT * FROM FACULTIES;

-- #==============================================================================================================
-- Групи (Groups)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор групи.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- #=========================
-- ■ Назва (Name). Назва групи.
-- ▷ Тип даних — varchar(10).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.
-- #=========================
-- ■ Рейтинг (Rating). Рейтинг групи.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 0 до 5.
-- #=========================
-- ■ Курс (Year). Курс (рік), на якому навчається група.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 1 до 5.

CREATE TABLE GROUPS_TABLE (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE,
	RATING INT NOT NULL CHECK(RATING >=0 AND RATING <=5),
	YEAR INT NOT NULL CHECK(YEAR >=0 AND YEAR <=5)
)

INSERT INTO GROUPS_TABLE (NAME, RATING, YEAR) VALUES
('Группа ЭК-101', 4, 1),
('Группа ЭК-102', 5, 1),
('Группа ЭК-103', 3, 1),
('Группа ЭК-201', 4, 2),
('Группа ЭК-202', 5, 2),
('Группа ЭК-203', 3, 2),
('Группа ЭК-301', 4, 3),
('Группа ЭК-302', 5, 3),
('Группа ЭК-303', 2, 3),
('Группа ЭК-304', 3, 3),
('Группа ЭК-401', 4, 4),
('Группа ЭК-402', 5, 4),
('Группа ЭК-403', 3, 4),
('Группа ЭК-404', 2, 4),
('Группа ЭК-501', 4, 5),
('Группа ЭК-502', 5, 5),
('Группа ЭК-503', 3, 5),
('Группа ЭК-504', 2, 5),
('Группа IT-101', 4, 1),
('Группа IT-102', 5, 1),
('Группа IT-201', 3, 2),
('Группа IT-202', 4, 2),
('Группа IT-301', 5, 3),
('Группа IT-302', 3, 3),
('Группа IT-401', 4, 4),
('Группа IT-402', 2, 4),
('Группа IT-501', 5, 5),
('Группа IT-502', 3, 5),
('Группа IT-503', 4, 5),
('Группа IT-504', 2, 5);

SELECT * FROM GROUPS_TABLE;

-- #==============================================================================================================
-- Викладачі(Teachers)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор
-- викладача.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- #=========================
-- ■ Дата працевлаштування (EmploymentDate). Дата працевлаштування викладача.
-- ▷ Тип даних — date.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше 01.01.1990.
-- #=========================
-- ■ Асистент (IsAssistant). Чи є викладач асистентом.
-- ▷ Тип даних — bit.
-- ▷ Не містить null-значення.
-- ▷ Значення за замовчуванням — 0.
-- #=========================
-- ■ Професор (IsProfessor). Чи є викладач професором.
-- ▷ Тип даних — bit.
-- ▷ Не містить null-значення.
-- ▷ Значення за замовчуванням — 0.
-- #=========================
-- ■ Ім’я (Name). Ім’я викладача.
-- ▷ Тип даних — nvarchar(max).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожнє.
-- #=========================
-- ■ Посада (Position). Посада викладача.
-- ▷ Тип даних — varchar(max).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- #=========================
-- ■ Надбавка (Premium). Надбавка викладача.
-- ▷ Тип даних — money.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше, ніж 0.
-- ▷ Значення за замовчуванням — 0.
-- #=========================
-- ■ Ставка (Salary). Ставка викладача.
-- ▷ Тип даних — money.
-- ▷ Не містить null-значення.
-- ▷ Не може бути меншою або дорівнювати 0.
-- #=========================
-- ■ Прізвище (Surname). Прізвище викладача.
-- ▷ Тип даних — varchar(max).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожнє.

CREATE TABLE TEACHERS (
	ID SERIAL NOT NULL PRIMARY KEY,
	EMPLOYMENTDATE DATE NOT NULL CHECK(EMPLOYMENTDATE > '1990-01-01'),
	ISASSISTANT BOOLEAN NOT NULL DEFAULT FALSE,
	ISPROFESSOR BOOLEAN NOT NULL DEFAULT FALSE,
	NAME VARCHAR(255) NOT NULL CHECK(NAME != ''),
	SURNAME  VARCHAR(255) NOT NULL CHECK(SURNAME  != ''),
	POSITION VARCHAR(255) NOT NULL CHECK(POSITION != ''),
	PREMIUM NUMERIC(12,2) NOT NULL CHECK(PREMIUM >= 0) DEFAULT 0,
	SALARY NUMERIC(12,2) NOT NULL CHECK(SALARY > 0) DEFAULT 0
);

INSERT INTO TEACHERS (EMPLOYMENTDATE, ISASSISTANT, ISPROFESSOR, NAME, SURNAME, POSITION, PREMIUM, SALARY) VALUES
('2015-09-01', TRUE, FALSE, 'Иван', 'Петренко', 'Ассистент кафедры экономики', 500, 2000),
('2010-03-15', FALSE, TRUE, 'Елена', 'Сидоренко', 'Профессор кафедры IT', 1000, 3500),
('2018-01-20', TRUE, FALSE, 'Андрей', 'Коваленко', 'Ассистент кафедры маркетинга', 400, 1800),
('2005-09-01', FALSE, TRUE, 'Наталья', 'Мельник', 'Профессор кафедры финансов', 1200, 4000),
('2012-08-15', FALSE, TRUE, 'Олег', 'Ткаченко', 'Профессор кафедры бухгалтерского учета', 800, 3200),
('2019-02-01', TRUE, FALSE, 'Катерина', 'Бондаренко', 'Ассистент кафедры цифровой экономики', 300, 1500),
('2008-06-10', FALSE, TRUE, 'Владимир', 'Шевченко', 'Профессор кафедры программирования', 900, 3600),
('2016-09-01', TRUE, FALSE, 'Марина', 'Кузьменко', 'Ассистент кафедры баз данных', 450, 1900),
('2011-11-20', FALSE, TRUE, 'Сергей', 'Гончаренко', 'Профессор кафедры электронной коммерции', 700, 3300),
('2017-03-10', TRUE, FALSE, 'Юлия', 'Лысенко', 'Ассистент кафедры бизнес-анализа', 350, 1700),
('2013-07-01', FALSE, TRUE, 'Александр', 'Кравченко', 'Профессор кафедры маркетинга', 950, 3400),
('2014-05-15', TRUE, FALSE, 'Оксана', 'Мороз', 'Ассистент кафедры финансов', 400, 1800),
('2009-09-01', FALSE, TRUE, 'Игорь', 'Федоренко', 'Профессор кафедры экономики', 1100, 3700),
('2018-08-20', TRUE, FALSE, 'Татьяна', 'Даниленко', 'Ассистент кафедры бухгалтерского учета', 300, 1600),
('2011-02-01', FALSE, TRUE, 'Виктор', 'Семененко', 'Профессор кафедры IT', 1000, 3600),
('2016-09-01', TRUE, FALSE, 'Алина', 'Бондарь', 'Ассистент кафедры программирования', 350, 1700),
('2010-01-10', FALSE, TRUE, 'Николай', 'Ткачук', 'Профессор кафедры баз данных', 900, 3500),
('2019-03-15', TRUE, FALSE, 'Евгения', 'Гаврилюк', 'Ассистент кафедры цифровой экономики', 250, 1500),
('2007-06-20', FALSE, TRUE, 'Павел', 'Козак', 'Профессор кафедры бизнес-анализа', 1200, 4000),
('2015-11-01', TRUE, FALSE, 'Людмила', 'Кириленко', 'Ассистент кафедры электронной коммерции', 300, 1600);

SELECT * FROM TEACHERS;

-- #==============================================================================================================
-- #==============================================================================================================
-- #==============================================================================================================

CREATE TABLE CURATORS (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL CHECK(NAME != ''),
	SURNAME VARCHAR(100) NOT NULL CHECK(SURNAME != '')
)

INSERT INTO CURATORS (NAME, SURNAME) VALUES
('Елена', 'Шевченко'),
('Андрей', 'Мельник'),
('Екатерина', 'Бондаренко'),
('Дмитрий', 'Ткаченко'),
('Ирина', 'Коваль'),
('Олег', 'Лысенко'),
('Татьяна', 'Гриценко'),
('Сергей', 'Кравченко'),
('Юлия', 'Мороз'),
('Николай', 'Петренко');

SELECT * FROM CURATORS;

-- #==============================================================================================================

ALTER TABLE DEPARTMENTS
ADD COLUMN FACULTYID INT NOT NULL REFERENCES FACULTIES(ID) DEFAULT 1;

UPDATE DEPARTMENTS
SET FACULTYID = 9*RANDOM() + 1;

SELECT * FROM DEPARTMENTS;

-- #==============================================================================================================

ALTER TABLE FACULTIES
ADD COLUMN FINANCING DECIMAL(10, 2) NOT NULL CHECK(FINANCING >=0) DEFAULT 0;

UPDATE FACULTIES
SET FINANCING = 20000*RANDOM() + 15000;

SELECT * FROM FACULTIES;

-- #==============================================================================================================

ALTER TABLE GROUPS_TABLE
ADD COLUMN DEPARTMENTID INT NOT NULL REFERENCES DEPARTMENTS(ID) DEFAULT 1;

UPDATE GROUPS_TABLE
SET DEPARTMENTID = 9*RANDOM() + 1;

SELECT * FROM GROUPS_TABLE;

-- #==============================================================================================================

-- Групи та куратори (GroupsCurators)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор групи та
-- куратора.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Ідентифікатор куратора (CuratorId). Куратор.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.
-- ■ Ідентифікатор групи (GroupId). Група.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.

CREATE TABLE GROUPSCURATORS (
	ID SERIAL NOT NULL PRIMARY KEY,
	CURATORID INT NOT NULL REFERENCES CURATORS(ID),
	GROUPID INT NOT NULL REFERENCES GROUPS_TABLE(ID)
)

INSERT INTO GROUPSCURATORS (CURATORID, GROUPID) VALUES
-- Куратор 1
(1, 1),
(1, 2),
(1, 3),

-- Куратор 2
(2, 4),
(2, 5),
(2, 6),

-- Куратор 3
(3, 7),
(3, 8),
(3, 9),

-- Куратор 4
(4, 10),
(4, 11),
(4, 12),

-- Куратор 5
(5, 13),
(5, 14),
(5, 15),

-- Куратор 6
(6, 16),
(6, 17),
(6, 18),

-- Куратор 7
(7, 19),
(7, 20),
(7, 21),

-- Куратор 8
(8, 22),
(8, 23),
(8, 24),

-- Куратор 9
(9, 25),
(9, 26),
(9, 27),

-- Куратор 10
(10, 28),
(10, 29),
(10, 30);

SELECT * FROM GROUPSCURATORS;

-- #==============================================================================================================

-- Групи та лекції (GroupsLectures)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор групи та
-- лекції.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Ідентифікатор групи (GroupId). Група.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.
-- ■ Ідентифікатор лекції (LectureId). Лекція.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.

CREATE TABLE GROUPSLECTURES (
	ID SERIAL NOT NULL PRIMARY KEY,
	GROUPID INT NOT NULL REFERENCES GROUPS_TABLE(ID),
	LECTUREID INT NOT NULL REFERENCES LECTURES(ID)
)

INSERT INTO GROUPSLECTURES (GROUPID, LECTUREID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(6, 6),
(7, 7),
(8, 8),
(9, 9),
(10, 10),
(11, 11),
(12, 12),
(13, 13),
(14, 14),
(15, 15),
(16, 16),
(17, 17),
(18, 18),
(19, 19),
(20, 20),
(21, 21),
(22, 22),
(23, 23),
(24, 24),
(25, 25),
(26, 26),
(27, 27),
(28, 28),
(29, 29),
(30, 30);

SELECT * FROM GROUPSLECTURES;

-- #==============================================================================================================

-- Лекції (Lectures)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор лекції.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Аудиторія (LectureRoom). Аудиторія, в якій проходить лекція.
-- ▷ Тип даних — varchar(max).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ■ Ідентифікатор предмета (SubjectId). Предмет, з якого читається лекція.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.
-- ■ Ідентифікатор викладача (TeacherId). Викладач, який веде лекцію.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.

CREATE TABLE LECTURES (
	ID SERIAL NOT NULL PRIMARY KEY,
	LECTUREROOM VARCHAR(100) NOT NULL CHECK(LECTUREROOM != ''),
	SUBJECTID INT NOT NULL REFERENCES SUBJECTS(ID),
	TEACHERID INT NOT NULL REFERENCES TEACHERS(ID)
)

INSERT INTO LECTURES (LECTUREROOM, SUBJECTID, TEACHERID) VALUES
('Аудитория 101', 1, 1),
('Аудитория 102', 2, 2),
('Аудитория 103', 3, 3),
('Аудитория 104', 4, 4),
('Аудитория 105', 5, 5),
('Аудитория 106', 6, 6),
('Аудитория 107', 7, 7),
('Аудитория 108', 8, 8),
('Аудитория 109', 9, 9),
('Аудитория 110', 10, 10),
('Аудитория 201', 11, 11),
('Аудитория 202', 12, 12),
('Аудитория 203', 13, 13),
('Аудитория 204', 14, 14),
('Аудитория 205', 15, 15),
('Аудитория 206', 16, 16),
('Аудитория 207', 17, 17),
('Аудитория 208', 18, 18),
('Аудитория 209', 19, 19),
('Аудитория 210', 20, 20),
('Аудитория 301', 1, 5),
('Аудитория 302', 2, 10),
('Аудитория 303', 3, 15),
('Аудитория 304', 4, 20),
('Аудитория 305', 5, 1),
('Аудитория 306', 6, 6),
('Аудитория 307', 7, 11),
('Аудитория 308', 8, 16),
('Аудитория 309', 9, 2),
('Аудитория 310', 10, 7);

SELECT * FROM LECTURES;

-- Предмети (Subjects)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор предмета.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Назва (Name). Назва предмета.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.

CREATE TABLE SUBJECTS (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE
)

INSERT INTO SUBJECTS (NAME) VALUES
('Математика'),
('Физика'),
('Химия'),
('Биология'),
('Информатика'),
('История'),
('География'),
('Литература'),
('Английский язык'),
('Украинский язык'),
('Русский язык'),
('Философия'),
('Экономика'),
('Право'),
('Психология'),
('Социология'),
('Искусство'),
('Музыка'),
('Физическая культура'),
('Астрономия');

SELECT * FROM SUBJECTS;

-- #==============================================================================================================

-- 1. Виведіть усі можливі пари рядків викладачів і груп.
SELECT T.SURNAME, GT.NAME 
FROM GROUPSLECTURES GL
		JOIN LECTURES L ON GL.LECTUREID = L.ID
		JOIN GROUPS_TABLE GT ON GL.GROUPID = GT.ID
		JOIN TEACHERS T ON L.TEACHERID = T.ID;

-- 2. Виведіть назви факультетів, фонд фінансування кафедр яких перевищує фонд фінансування факультету.
SELECT DEP.NAME 
FROM DEPARTMENTS DEP
		JOIN FACULTIES F ON DEP.FACULTYID = F.ID
WHERE DEP.FINANCING < F.FINANCING;

-- 3. Виведіть прізвища кураторів груп і назви груп, які вони курирують.
SELECT C.SURNAME, GT.NAME FROM GROUPSCURATORS GC
		JOIN CURATORS C ON GC.CURATORID = C.ID
		JOIN GROUPS_TABLE GT ON GC.GROUPID = GT.ID

-- 4. Виведіть імена та прізвища викладачів, які читають лекції у групі «Группа ЭК-101».
SELECT T.NAME, T.SURNAME
FROM GROUPSLECTURES GL
		JOIN LECTURES L ON GL.LECTUREID = L.ID
		JOIN GROUPS_TABLE GT ON GL.GROUPID = GT.ID
		JOIN TEACHERS T ON L.TEACHERID = T.ID
WHERE GT.NAME = 'Группа ЭК-101';

-- 5. Виведіть прізвища викладачів і назви факультетів, на яких вони читають лекції.
SELECT T.SURNAME, DEP.NAME 
FROM GROUPSLECTURES GL
		JOIN LECTURES L ON GL.LECTUREID = L.ID
		JOIN GROUPS_TABLE GT ON GL.GROUPID = GT.ID
		JOIN TEACHERS T ON L.TEACHERID = T.ID
		JOIN DEPARTMENTS DEP ON GT.DEPARTMENTID = DEP.ID;

-- 6. Виведіть назви кафедр і назви груп, які до них належать.
SELECT F.NAME, GT.NAME 
FROM GROUPS_TABLE GT
		JOIN DEPARTMENTS DEP ON GT.DEPARTMENTID = DEP.ID
		JOIN FACULTIES F ON DEP.FACULTYID = F.ID;

-- 7. Виведіть назви предметів, які викладає викладач «Иван Петренко».
SELECT T.NAME, T.SURNAME, S.NAME 
FROM LECTURES L
		JOIN TEACHERS T ON L.TEACHERID = T.ID
		JOIN SUBJECTS S ON L.SUBJECTID = S.ID
WHERE T.NAME = 'Иван' AND T.SURNAME = 'Петренко';

-- 8. Виведіть назви кафедр, на яких викладається дисципліна «Информатика».
SELECT DEP.NAME
FROM GROUPSLECTURES GL
		JOIN GROUPS_TABLE GT ON GL.GROUPID = GT.ID
		JOIN DEPARTMENTS DEP ON GT.DEPARTMENTID = DEP.ID
		JOIN LECTURES L ON GL.LECTUREID = L.ID
		JOIN SUBJECTS S ON L.SUBJECTID = S.ID
WHERE S.NAME = 'Информатика';

-- 9. Виведіть назви груп, що належать до факультету «Факультет экономики и IT».
SELECT GT.NAME
FROM GROUPSLECTURES GL
		JOIN GROUPS_TABLE GT ON GL.GROUPID = GT.ID
		JOIN DEPARTMENTS DEP ON GT.DEPARTMENTID = DEP.ID
		JOIN FACULTIES F ON DEP.FACULTYID = F.ID
WHERE F.NAME = 'Факультет экономики и IT';

-- 10. Виведіть назви груп 5-го курсу, а також назви факультетів, до яких вони належать.
SELECT GT.NAME, F.NAME
FROM GROUPSLECTURES GL
		JOIN GROUPS_TABLE GT ON GL.GROUPID = GT.ID
		JOIN DEPARTMENTS DEP ON GT.DEPARTMENTID = DEP.ID
		JOIN FACULTIES F ON DEP.FACULTYID = F.ID
WHERE GT.YEAR = 5;

-- 11. Виведіть повні імена викладачів і лекції, які вони читають (назви предметів та груп). 
-- Зробіть відбір по тим лекціям, -- які проходять в аудиторії «Аудитория 105».
SELECT T.NAME, T.SURNAME, L.LECTUREROOM, S.NAME, GT.NAME
FROM GROUPSLECTURES GL
		JOIN GROUPS_TABLE GT ON GL.GROUPID = GT.ID
		JOIN DEPARTMENTS DEP ON GT.DEPARTMENTID = DEP.ID
		JOIN LECTURES L ON GL.LECTUREID = L.ID
		JOIN TEACHERS T ON L.TEACHERID = T.ID
		JOIN SUBJECTS S ON L.SUBJECTID = S.ID
WHERE L.LECTUREROOM = 'Аудитория 105';