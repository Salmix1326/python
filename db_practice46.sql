-- Завдання 1
-- Створіть базу даних Лікарня (Hospital), яка міститиме інформацію про обстеження, які проводяться в лікарні.
-- Опис бази даних знаходиться в кінці цього файлу.
-- Створіть базу даних Лікарня (Hospital), яка міститиме інформацію про обстеження, які проводяться в -- лікарні.
-- Обстеження, які проводяться в лікарні, представлені у вигляді таблиці Обстеження (Examinations), 
-- в якій зібрано основну інформацію: назва обстеження, день тижня, коли проводиться обстеження, 
-- а також час початку та завершення.
-- Також у базі даних є інформація про персонал лікарні, яка зберігається в таблиці Лікарі (Doctors). 
-- Дані про відділення та захворювання містяться в таблицях Відділення
-- (Departments) та Захворювання (Diseases) відповідно.
-- Опис палат зберігається в таблиці Палати (Wards).
-- Нижче наведено детальний опис структури кожної таблиці.

-- Відділення (Departments)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор відділення.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Корпус (Building). Номер корпусу, в якому знаходиться відділення.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 1 до 5.
-- ■ Фінансування (Financing). Фонд фінансування відділення.
-- ▷ Тип даних для зберігання грошових значень.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше, ніж 0.
-- ▷ Значення за замовчуванням — 0.
-- ■ Назва (Name). Назва відділення.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.

CREATE TABLE DEPARTMENTS (
	ID SERIAL NOT NULL PRIMARY KEY,
	BUILDING INT NOT NULL CHECK(BUILDING BETWEEN 1 AND 5),
	FINANCING INT NOT NULL CHECK(FINANCING >= 0),
	NAME VARCHAR(100) NOT NULL UNIQUE
)

INSERT INTO DEPARTMENTS (BUILDING, FINANCING, NAME)
VALUES
	(1, 150000, 'Кардиология'),
	(2, 120000, 'Неврология'),
	(3, 180000, 'Хирургия'),
	(4, 95000,  'Педиатрия'),
	(5, 110000, 'Травматология'),
	(2, 130000, 'Онкология'),
	(3, 160000, 'Офтальмология');

SELECT * FROM DEPARTMENTS;

-- # ============================================================================================
-- Захворювання (Diseases)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор захво-рювання.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Назва (Name). Назва захворювання.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.
-- ■ Ступінь тяжкості (Severity). Ступінь тяжкості захворювання.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше, ніж 1.
-- ▷ Значення за замовчуванням — 1.

CREATE TABLE DISEASES (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE,
	SEVERITY INT NOT NULL CHECK(SEVERITY >= 1) DEFAULT 1
);

INSERT INTO DISEASES (NAME, SEVERITY)
VALUES
	('Грипп', 2),
	('Пневмония', 4),
	('Мигрень', 2),
	('Инфаркт миокарда', 5),
	('Перелом кости', 3),
	('Диабет', 4),
	('Астма', 3),
	('Гипертония', 3),
	('Гастрит', 2),
	('Язва желудка', 4),
	('Артрит', 3),
	('Аппендицит', 4),
	('Ожирение', 2),
	('Рак лёгких', 5),
	('Депрессия', 3),
	('Анемия', 2),
	('Гепатит B', 4),
	('Псориаз', 2),
	('Коронавирусная инфекция', 4),
	('Инсульт', 5);


-- INSERT INTO DISEASES (NAME, SEVERITY)
-- VALUES ('Инсульт', 3);

SELECT * FROM DISEASES;

-- # ============================================================================================
-- Лікарі (Doctors)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор лікаря.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Ім’я (Name). Ім’я лікаря.
-- ▷ Тип даних — varchar(255).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожнє.
-- ■ Телефон(Phone). Телефонний номер лікаря.
-- ▷ Тип даних — char(10).
-- ▷ Може містити null-значення.
-- ■ Ставка (Salary). Ставка лікаря.
-- ▷ Тип даних для зберігання грошових значень.
-- ▷ Не містить null-значення.
-- ▷ Не може бути меншою або дорівнювати 0.
-- ■ Прізвище (Surname). Прізвище лікаря.
-- ▷ Тип даних — varchar(255).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожнє.

CREATE TABLE DOCTORS (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(255) NOT NULL CHECK(NAME != ''),
	PHONE CHAR(10),
	SALARY INT NOT NULL CHECK(SALARY > 0),
	SURNAME VARCHAR(255) NOT NULL CHECK(SURNAME != '')
);

INSERT INTO DOCTORS (NAME, SURNAME, PHONE, SALARY)
VALUES
	('Алексей', 'Иванов', '9001234567', 85000),
	('Мария', 'Петрова', '9002345678', 92000),
	('Дмитрий', 'Сидоров', '9003456789', 87000),
	('Ольга', 'Кузнецова', '9004567890', 94000),
	('Игорь', 'Смирнов', '9005678901', 88000),
	('Анна', 'Волкова', '9006789012', 96000),
	('Сергей', 'Новиков', '9007890123', 91000),
	('Елена', 'Федорова', '9008901234', 97000),
	('Андрей', 'Морозов', '9009012345', 89000),
	('Наталья', 'Алексеева', '9010123456', 93000),
	('Павел', 'Лебедев', '9011234567', 85000),
	('Татьяна', 'Семенова', '9012345678', 92000),
	('Роман', 'Егоров', '9013456789', 87000),
	('Ирина', 'Николаева', '9014567890', 94000),
	('Константин', 'Орлов', '9015678901', 88000),
	('Юлия', 'Макарова', '9016789012', 96000),
	('Михаил', 'Зайцев', '9017890123', 91000),
	('Светлана', 'Соловьева', '9018901234', 97000),
	('Артем', 'Борисов', '9019012345', 89000),
	('Виктория', 'Васильева', '9020123456', 93000),
	('Кирилл', 'Павлов', '9021234567', 85000),
	('Екатерина', 'Ковалёва', '9022345678', 92000),
	('Никита', 'Тарасов', '9023456789', 87000),
	('Валентина', 'Беляева', '9024567890', 94000),
	('Максим', 'Гусев', '9025678901', 88000),
	('Лариса', 'Киселева', '9026789012', 96000),
	('Александр', 'Романов', '9027890123', 91000),
	('Алёна', 'Мартынова', '9028901234', 97000),
	('Владимир', 'Савельев', '9029012345', 89000),
	('Дарья', 'Фролова', '9030123456', 93000),
	('Григорий', 'Чернов', '9031234567', 85000),
	('Марина', 'Абрамова', '9032345678', 92000),
	('Олег', 'Степанов', '9033456789', 87000),
	('Надежда', 'Карпова', '9034567890', 94000),
	('Борис', 'Сорокин', '9035678901', 88000),
	('Вера', 'Анисимова', '9036789012', 96000),
	('Станислав', 'Куликов', '9037890123', 91000),
	('Евгения', 'Медведева', '9038901234', 97000),
	('Леонид', 'Гаврилов', '9039012345', 89000),
	('Полина', 'Данилова', '9040123456', 93000);

SELECT * FROM DOCTORS

-- # ============================================================================================
-- Обстеження (Examinations)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор обсте-ження.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ День тижня (DayOfWeek). День тижня, коли проводиться обстеження.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 1 до 7.
-- ■ Час завершення (EndTime). Час завершення обстеження.
-- ▷ Тип даних для зберігання часу.
-- ▷ Не містить null-значення.
-- ▷ Має бути більше, ніж час початку обстеження.
-- ■ Назва (Name). Назва обстеження.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.
-- ■ Час початку (StartTime). Час початку обстеження.
-- ▷ Тип даних для зберігання часу.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 8:00 до 18:00.

CREATE TABLE EXAMINATIONS (
	ID SERIAL NOT NULL PRIMARY KEY,
	DAYOFWEEK INT NOT NULL CHECK(DAYOFWEEK BETWEEN 1 AND 7),
	ENDTIME TIME NOT NULL CHECK(ENDTIME > STARTTIME),
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE,
	STARTTIME TIME NOT NULL CHECK(STARTTIME BETWEEN '08:00' AND '18:00')
);

INSERT INTO EXAMINATIONS (DAYOFWEEK, STARTTIME, ENDTIME, NAME)
VALUES
	(1, '08:00', '08:30', 'Общий осмотр'),
	(1, '08:45', '09:15', 'Измерение давления'),
	(1, '09:30', '10:00', 'Снятие ЭКГ'),
	(2, '08:00', '08:40', 'Рентген грудной клетки'),
	(2, '09:00', '09:30', 'УЗИ брюшной полости'),
	(2, '10:00', '10:30', 'Проверка зрения'),
	(3, '08:30', '09:00', 'Измерение сахара в крови'),
	(3, '09:15', '09:45', 'Анализ крови'),
	(3, '10:00', '10:30', 'Анализ мочи'),
	(3, '10:45', '11:15', 'Флюорография'),
	(4, '08:00', '08:30', 'Проверка слуха'),
	(4, '08:45', '09:15', 'Осмотр терапевта'),
	(4, '09:30', '10:00', 'Консультация кардиолога'),
	(4, '10:15', '10:45', 'Консультация невролога'),
	(4, '11:00', '11:30', 'Консультация хирурга'),
	(5, '08:00', '08:40', 'МРТ головного мозга'),
	(5, '09:00', '09:30', 'КТ грудной клетки'),
	(5, '09:45', '10:15', 'Эндоскопия'),
	(5, '10:30', '11:00', 'Колонскопия'),
	(5, '11:15', '11:45', 'Маммография'),
	(6, '08:00', '08:30', 'Осмотр дерматолога'),
	(6, '08:45', '09:15', 'Осмотр офтальмолога'),
	(6, '09:30', '10:00', 'Осмотр эндокринолога'),
	(6, '10:15', '10:45', 'Осмотр отоларинголога'),
	(6, '11:00', '11:30', 'Осмотр гастроэнтеролога'),
	(7, '08:00', '08:30', 'Физиотерапия'),
	(7, '08:45', '09:15', 'ЛФК'),
	(7, '09:30', '10:00', 'Массаж спины'),
	(7, '10:15', '10:45', 'Психологическая консультация'),
	(7, '11:00', '11:30', 'Контрольный осмотр');

SELECT * FROM EXAMINATIONS

-- # ============================================================================================
-- Палати (Wards)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Корпус (Building). Номер корпусу, де знаходиться палата.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Має бути в діапазоні від 1 до 5.
-- ■ Поверх (Floor). Номер поверху, на якому знаходиться палата.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Не може бути менше, ніж 1.
-- ■ Назва (Name). Назва палати.
-- ▷ Тип даних — varchar(20).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.

CREATE TABLE WARDS (
	ID SERIAL NOT NULL PRIMARY KEY,
	DEPARTMENT_ID INT REFERENCES DEPARTMENTS(ID) NOT NULL,
	FLOOR INT NOT NULL CHECK(FLOOR >= 1),
	NAME VARCHAR(20) NOT NULL CHECK(NAME != '') UNIQUE
);

INSERT INTO WARDS (DEPARTMENT_ID, FLOOR, NAME)
VALUES
	(1, 1, 'Палата №101'),
	(1, 2, 'Палата №102'),
	(2, 1, 'Палата №201'),
	(2, 2, 'Палата №202'),
	(3, 1, 'Палата №301'),
	(3, 2, 'Палата №302'),
	(3, 3, 'Палата №303'),
	(4, 1, 'Палата №401'),
	(4, 2, 'Палата №402'),
	(4, 3, 'Палата №403'),
	(5, 1, 'Палата №501'),
	(5, 2, 'Палата №502'),
	(6, 1, 'Палата №601'),
	(6, 2, 'Палата №602'),
	(6, 3, 'Палата №603'),
	(7, 1, 'Палата №701'),
	(7, 2, 'Палата №702'),
	(7, 3, 'Палата №703'),
	(7, 4, 'Палата №704'),
	(7, 5, 'Палата №705');

SELECT * FROM WARDS;

ALTER TABLE DOCTORS 
ADD COLUMN PREMIUM INT NOT NULL CHECK(PREMIUM >= 0) DEFAULT 0; 

SELECT * FROM DOCTORS;

UPDATE DOCTORS
SET PREMIUM = 1000*RANDOM();

CREATE TABLE SPECIALIZATIONS (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE
);

INSERT INTO SPECIALIZATIONS (NAME) VALUES
('Терапевт'),
('Хирург'),
('Кардиолог'),
('Невролог'),
('Педиатр'),
('Стоматолог'),
('Офтальмолог'),
('Дерматолог'),
('Отоларинголог'),
('Эндокринолог'),
('Гинеколог'),
('Уролог'),
('Онколог'),
('Психиатр'),
('Травматолог');

SELECT * FROM SPECIALIZATIONS;

CREATE TABLE DOCTORSSPECIALIZATIONS (
	ID SERIAL NOT NULL PRIMARY KEY,
	DOCTOR_ID INT NOT NULL REFERENCES DOCTORS(ID),
	SPECIALIZATION_ID INT NOT NULL REFERENCES SPECIALIZATIONS(ID)
)

INSERT INTO DOCTORSSPECIALIZATIONS (DOCTOR_ID, SPECIALIZATION_ID) VALUES
(1, 1), (1, 2), (1, 3),
(2, 4), (2, 5), (2, 6),
(3, 7), (3, 8), (3, 9),
(4, 10), (4, 11), (4, 12),
(5, 13), (5, 14), (5, 15),
(6, 1), (6, 4), (6, 7),
(7, 2), (7, 5), (7, 8),
(8, 3), (8, 6), (8, 9),
(9, 10), (9, 13), (9, 14),
(10, 11), (10, 12), (10, 15),
(11, 1), (11, 5), (11, 10),
(12, 2), (12, 6), (12, 11),
(13, 3), (13, 7), (13, 12),
(14, 4), (14, 8), (14, 13),
(15, 5), (15, 9), (15, 14),
(16, 6), (16, 10), (16, 15),
(17, 7), (17, 11), (17, 1),
(18, 8), (18, 12), (18, 2),
(19, 9), (19, 13), (19, 3),
(20, 10), (20, 14), (20, 4),
(21, 11), (21, 15), (21, 5),
(22, 12), (22, 1), (22, 6),
(23, 13), (23, 2), (23, 7),
(24, 14), (24, 3), (24, 8),
(25, 15), (25, 4), (25, 9),
(26, 1), (26, 5), (26, 10),
(27, 2), (27, 6), (27, 11),
(28, 3), (28, 7), (28, 12),
(29, 4), (29, 8), (29, 13),
(30, 5), (30, 9), (30, 14);

SELECT DOCTORS.SURNAME, DOCTORS.NAME, string_agg(SPECIALIZATIONS.NAME, ', ')
FROM DOCTORSSPECIALIZATIONS 
JOIN DOCTORS ON DOCTORSSPECIALIZATIONS.DOCTOR_ID = DOCTORS.ID
JOIN SPECIALIZATIONS ON DOCTORSSPECIALIZATIONS.SPECIALIZATION_ID = SPECIALIZATIONS.ID
GROUP BY DOCTORS.SURNAME, DOCTORS.NAME;

-- Спонсори (Sponsors)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор спонсора.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Назва (Name). Назва спонсора.
-- ▷ Тип даних — varchar(100).
-- ▷ Не містить null-значення.
-- ▷ Не може бути порожньою.
-- ▷ Має бути унікальною.

CREATE TABLE SPONSORS (
	ID SERIAL NOT NULL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL CHECK(NAME != '') UNIQUE
)

INSERT INTO SPONSORS (NAME) VALUES
('Pfizer'),
('Roche'),
('Johnson & Johnson'),
('Novartis'),
('Siemens Healthineers'),
('Medtronic'),
('GlaxoSmithKline'),
('AstraZeneca'),
('Philips Healthcare'),
('Благотворительный фонд "Здоровье Нации"');

SELECT * FROM SPONSORS;

-- Пожертвування (Donations)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор пожертвування.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Сума (Amount). Сума пожертвування.
-- ▷ Тип даних для зберігання грошових значень.
-- ▷ Не містить null-значення.
-- ▷ Не може бути меншою або дорівнювати 0.
-- ■ Дата (Date). Дата пожертвування.
-- ▷ Тип даних для зберігання дати.
-- ▷ Не містить null-значення.
-- ▷ Не може бути більшою за поточну дату.
-- ▷ Значення за замовчуванням — поточна дата.
-- ■ Ідентифікатор відділення (DepartmentId). Відділення,
-- якому було надано пожертвування.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.
-- ■ Ідентифікатор спонсора (SponsorId). Спонсор, який
-- зробив пожертвування.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.

CREATE TABLE DONATIONS (
	ID SERIAL NOT NULL PRIMARY KEY,
	AMOUNT INT NOT NULL CHECK(AMOUNT > 0),
	DONATION_DATE DATE NOT NULL CHECK(DONATION_DATE < CURRENT_DATE) DEFAULT CURRENT_DATE,
	DEPARTMENT_ID INT NOT NULL REFERENCES DEPARTMENTS(ID),
	SPONSOR_ID INT NOT NULL REFERENCES SPONSORS(ID)
)

SELECT COUNT(*) FROM DEPARTMENTS;

INSERT INTO DONATIONS (AMOUNT, DONATION_DATE, DEPARTMENT_ID, SPONSOR_ID) VALUES
(5000.00, '2025-01-10', 1, 1),
(12000.50, '2025-02-15', 2, 3),
(7500.00, '2025-03-22', 3, 5),
(25000.00, '2025-04-05', 4, 2),
(18000.75, '2025-05-12', 5, 4),
(9500.00, '2025-06-09', 6, 6),
(30000.00, '2025-07-01', 7, 7),
(21000.00, '2025-07-18', 1, 8),
(11000.00, '2025-08-03', 2, 9),
(6000.00, '2025-08-25', 3, 10),
(17000.00, '2025-09-02', 4, 1),
(26000.00, '2025-09-10', 5, 2),
(15500.00, '2025-09-18', 6, 3),
(8900.00, '2025-09-20', 7, 4),
(22000.00, '2025-09-23', 1, 5),
(17500.00, '2025-09-25', 2, 6),
(13300.00, '2025-09-27', 3, 7),
(44000.00, '2025-09-29', 4, 8),
(5100.00, '2025-09-30', 5, 9),
(29500.00, '2025-10-01', 6, 10),
(16600.00, '2025-10-02', 7, 1),
(9100.00, '2025-10-03', 1, 2),
(24000.00, '2025-10-04', 2, 3),
(32000.00, '2025-10-05', 3, 4),
(27500.00, '2025-10-06', 4, 5),
(8500.00, '2025-10-07', 5, 6),
(19400.00, '2025-10-08', 6, 7),
(23000.00, '2025-10-09', 7, 8),
(12900.00, '2025-10-10', 1, 9),
(47000.00, '2025-10-11', 2, 10);

SELECT * FROM DONATIONS DON
		JOIN SPONSORS S ON S.ID = DON.SPONSOR_ID
		JOIN DEPARTMENTS DEP ON DEP.ID = DON.DEPARTMENT_ID;

-- Відпустки(Vacations)
-- ■ Ідентифікатор (Id). Унікальний ідентифікатор
-- відпустки.
-- ▷ Тип даних — int.
-- ▷ Автоприріст.
-- ▷ Не містить null-значення.
-- ▷ Первинний ключ.
-- ■ Дата завершення (EndDate). Дата завершення відпустки.
-- ▷ Тип даних для зберігання дати.
-- ▷ Не містить null-значення.
-- ▷ Має бути більшою за дату початку відпустки.
-- ■ Дата початку (StartDate). Дата початку відпустки.
-- ▷ Тип даних для зберігання дати.
-- ▷ Не містить null-значення.
-- ■ Ідентифікатор лікаря (DoctorId). Лікар, який у відпустці.
-- ▷ Тип даних — int.
-- ▷ Не містить null-значення.
-- ▷ Зовнішній ключ.

CREATE TABLE VACATIONS (
	ID SERIAL NOT NULL PRIMARY KEY,
	STARTDATE DATE NOT NULL,
	ENDDATE DATE NOT NULL CHECK(ENDDATE >= STARTDATE),
	DOCTOR_ID INT NOT NULL REFERENCES DOCTORS(ID)
);

INSERT INTO VACATIONS (STARTDATE, ENDDATE, DOCTOR_ID) VALUES
('2025-01-05', '2025-01-20', 1),
('2025-03-10', '2025-03-25', 1),
('2025-07-01', '2025-07-15', 1),
('2025-02-01', '2025-02-14', 2),
('2025-06-10', '2025-06-25', 2),
('2025-09-05', '2025-09-20', 2),
('2025-01-20', '2025-02-05', 3),
('2025-05-15', '2025-05-30', 3),
('2025-10-10', '2025-10-25', 3),
('2025-03-01', '2025-03-16', 4),
('2025-07-20', '2025-08-05', 4),
('2025-12-01', '2025-12-15', 4),
('2025-01-10', '2025-01-25', 5),
('2025-04-01', '2025-04-15', 5),
('2025-08-01', '2025-08-20', 5),
('2025-02-05', '2025-02-20', 6),
('2025-06-05', '2025-06-20', 6),
('2025-11-01', '2025-11-15', 6),
('2025-03-05', '2025-03-20', 7),
('2025-07-10', '2025-07-25', 7),
('2025-09-15', '2025-09-30', 7),
('2025-01-15', '2025-02-01', 8),
('2025-05-05', '2025-05-20', 8),
('2025-08-25', '2025-09-10', 8),
('2025-02-10', '2025-02-25', 9),
('2025-06-01', '2025-06-15', 9),
('2025-10-01', '2025-10-15', 9),
('2025-03-15', '2025-03-30', 10),
('2025-07-01', '2025-07-16', 10),
('2025-12-05', '2025-12-20', 10),
('2025-04-05', '2025-04-20', 11),
('2025-08-10', '2025-08-25', 11),
('2025-10-10', '2025-10-25', 11),
('2025-01-25', '2025-02-10', 12),
('2025-05-10', '2025-05-25', 12),
('2025-09-01', '2025-09-15', 12),
('2025-02-15', '2025-03-01', 13),
('2025-06-10', '2025-06-25', 13),
('2025-11-05', '2025-11-20', 13),
('2025-03-20', '2025-04-05', 14),
('2025-07-05', '2025-07-20', 14),
('2025-09-20', '2025-10-05', 14),
('2025-01-10', '2025-01-25', 15),
('2025-05-01', '2025-05-15', 15),
('2025-08-01', '2025-08-16', 15),
('2025-02-01', '2025-02-18', 16),
('2025-06-05', '2025-06-20', 16),
('2025-10-01', '2025-10-15', 16),
('2025-03-05', '2025-03-20', 17),
('2025-07-01', '2025-07-15', 17),
('2025-09-05', '2025-09-20', 17),
('2025-01-20', '2025-02-05', 18),
('2025-05-10', '2025-05-25', 18),
('2025-11-01', '2025-11-15', 18),
('2025-02-15', '2025-03-01', 19),
('2025-06-10', '2025-06-25', 19),
('2025-08-20', '2025-09-05', 19),
('2025-03-10', '2025-03-25', 20),
('2025-07-15', '2025-07-30', 20),
('2025-12-10', '2025-12-25', 20),
('2025-01-05', '2025-01-20', 21),
('2025-04-10', '2025-04-25', 21),
('2025-08-10', '2025-08-25', 21),
('2025-02-05', '2025-02-20', 22),
('2025-06-15', '2025-06-30', 22),
('2025-10-10', '2025-10-25', 22),
('2025-03-01', '2025-03-16', 23),
('2025-07-01', '2025-07-15', 23),
('2025-09-15', '2025-09-30', 23),
('2025-01-10', '2025-01-25', 24),
('2025-05-01', '2025-05-16', 24),
('2025-11-05', '2025-11-20', 24),
('2025-02-15', '2025-03-01', 25),
('2025-06-05', '2025-06-20', 25),
('2025-09-01', '2025-09-16', 25),
('2025-03-20', '2025-04-05', 26),
('2025-07-10', '2025-07-25', 26),
('2025-12-01', '2025-12-15', 26),
('2025-01-15', '2025-02-01', 27),
('2025-05-10', '2025-05-25', 27),
('2025-09-20', '2025-10-05', 27),
('2025-02-10', '2025-02-25', 28),
('2025-06-01', '2025-06-15', 28),
('2025-10-15', '2025-10-30', 28),
('2025-03-15', '2025-03-30', 29),
('2025-07-05', '2025-07-20', 29),
('2025-11-10', '2025-11-25', 29),
('2025-01-25', '2025-02-10', 30),
('2025-04-15', '2025-04-30', 30),
('2025-08-20', '2025-09-05', 30);

CREATE TABLE DOCTORSEXAMINATIONS (
	ID SERIAL NOT NULL PRIMARY KEY,
	DOCTOR_ID INT NOT NULL REFERENCES DOCTORS(ID),
	EXAMINATION_ID INT NOT NULL REFERENCES EXAMINATIONS(ID)
);

INSERT INTO DOCTORSEXAMINATIONS (DOCTOR_ID, EXAMINATION_ID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5),
(6, 6),
(7, 7),
(8, 8),
(9, 9),
(10, 10),
(11, 11),
(12, 12),
(13, 13),
(14, 14),
(15, 15),
(16, 16),
(17, 17),
(18, 18),
(19, 19),
(20, 20),
(21, 21),
(22, 22),
(23, 23),
(24, 24),
(25, 25),
(26, 26),
(27, 27),
(28, 28),
(29, 29),
(30, 30),
(31, 1),
(32, 2),
(33, 3),
(34, 4),
(35, 5),
(36, 6),
(37, 7),
(38, 8),
(39, 9),
(40, 10);

ALTER TABLE EXAMINATIONS
ADD COLUMN DEPARTMENTID INT NOT NULL REFERENCES DEPARTMENTS(ID) DEFAULT 1;

UPDATE EXAMINATIONS
SET DEPARTMENTID = 6*RANDOM() + 1;

SELECT * FROM EXAMINATIONS;

SELECT COUNT(*) FROM DEPARTMENTS;

ALTER TABLE DOCTORS
ADD COLUMN DEPARTMENTID INT NOT NULL REFERENCES DEPARTMENTS(ID) DEFAULT 1;

UPDATE DOCTORS
SET DEPARTMENTID = 6*RANDOM() + 1;

SELECT * FROM DOCTORS;

ALTER TABLE EXAMINATIONS
ADD COLUMN DISEASEID INT NOT NULL REFERENCES DISEASES(ID) DEFAULT 1;

UPDATE EXAMINATIONS
SET DISEASEID = 6*RANDOM() + 1;

SELECT * FROM EXAMINATIONS;

-- Завдання
-- 1. Виведіть повні імена лікарів та їх спеціалізації.
SELECT D.NAME, D.SURNAME, S.NAME 
FROM DOCTORSSPECIALIZATIONS DS
		JOIN SPECIALIZATIONS S ON S.ID = DS.SPECIALIZATION_ID
		JOIN DOCTORS D ON D.ID = DS.DOCTOR_ID;

-- 2. Виведіть прізвища та зарплати (сума ставки та надбавки) лікарів, які не перебувають у відпустці.
SELECT * FROM DOCTORS;
SELECT * FROM VACATIONS;

SELECT * 
FROM DOCTORS D
		JOIN VACATIONS V ON D.ID = V.DOCTOR_ID
WHERE NOT (CURRENT_DATE BETWEEN V.STARTDATE AND V.ENDDATE); -- CHECK DOCTORS WITHOUT VACATION
   
-- 3. Виведіть назви палат, які знаходяться у відділенні
SELECT * FROM WARDS W
		JOIN DEPARTMENTS D ON W.DEPARTMENT_ID = D.ID
WHERE D.NAME = 'Хирургия';

-- 4. Виведіть назви відділень без повторень, які спонсоруються компанією «Umbrella Corporation».
SELECT DISTINCT D.NAME 
FROM DONATIONS DON
		JOIN DEPARTMENTS D ON D.ID = DON.DEPARTMENT_ID
		JOIN SPONSORS S ON S.ID = DON.SPONSOR_ID
WHERE S.NAME = 'Pfizer';

-- 5. Виведіть усі пожертвування за останній місяць у вигляді: відділення, спонсор, сума пожертвування, дата
-- пожертвування.
SELECT DISTINCT D.NAME, S.NAME, DON.AMOUNT, DON.DONATION_DATE
FROM DONATIONS DON
		JOIN DEPARTMENTS D ON D.ID = DON.DEPARTMENT_ID
		JOIN SPONSORS S ON S.ID = DON.SPONSOR_ID
WHERE DON.DONATION_DATE > (CURRENT_DATE - INTERVAL '1 MONTH');

-- 6. Виведіть прізвища лікарів із зазначенням відділень,
-- в яких вони проводять обстеження. Враховуйте обстеження, які проводяться лише у будні дні.
SELECT D.SURNAME, DEP.NAME, E.NAME, E.DAYOFWEEK
FROM DOCTORSEXAMINATIONS DE
		JOIN DOCTORS D ON D.ID = DE.DOCTOR_ID
		JOIN EXAMINATIONS E ON E.ID = DE.EXAMINATION_ID
		JOIN DEPARTMENTS DEP ON DEP.ID = E.DEPARTMENTID
WHERE E.DAYOFWEEK BETWEEN 1 AND 5;
		
-- 7. Виведіть назви відділень, які отримували пожертву-вання
-- у розмірі понад 100000, із зазначенням їх лікарів.
-- 8. Виведіть назви відділень, в яких лікарі не отримують
-- надбавки.
-- 9. Виведіть назви відділень і назви захворювань, обстеження з яких вони проводили за останні півроку.